// This file is autogenerated. Take a look at `Preprocessor` target in RxSwift project 
//
//  _RXSwift_SharedSequence+Operators+arity.swift
//  RxCocoa
//
//  Created by Krunoslav Zaher on 10/14/15.
//  Copyright Â© 2015 Krunoslav Zaher. All rights reserved.
//

//import RxSwift



// 2

extension _RXSwift_SharedSequence {
    /**
    Merges the specified _RXSwift_Observable.sequences into one _RXSwift_Observable.sequence by using the selector function whenever all of the _RXSwift_Observable.sequences have produced an element at a corresponding index.

    - parameter resultSelector: Function to invoke for each series of elements at corresponding indexes in the sources.
    - returns: An _RXSwift_Observable.sequence containing the result of combining elements of the sources using the specified result selector function.
    */
    static func zip<O1: _RXSwift_SharedSequenceConvertibleType, O2: _RXSwift_SharedSequenceConvertibleType>
        (_ source1: O1, _ source2: O2, resultSelector: @escaping (O1.Element, O2.Element) throws -> Element)
        -> _RXSwift_SharedSequence<O1.SharingStrategy, Element> where SharingStrategy == O1.SharingStrategy,
            SharingStrategy == O2.SharingStrategy {
        let source = _RXSwift_Observable.zip(
            source1.asSharedSequence().asObservable(), source2.asSharedSequence().asObservable(),
            resultSelector: resultSelector
        )

        return _RXSwift_SharedSequence<SharingStrategy, Element>(source)
    }
}

extension _RXSwift_SharedSequenceConvertibleType where Element == Any {
    /**
    Merges the specified _RXSwift_Observable.sequences into one _RXSwift_Observable.sequence of element tuples whenever all of the _RXSwift_Observable.sequences have produced an element at a corresponding index.

    - returns: An _RXSwift_Observable.sequence containing the result of combining elements of the sources.
    */
    static func zip<O1: _RXSwift_SharedSequenceConvertibleType, O2: _RXSwift_SharedSequenceConvertibleType>
        (_ source1: O1, _ source2: O2)
        -> _RXSwift_SharedSequence<O1.SharingStrategy, (O1.Element, O2.Element)> where SharingStrategy == O1.SharingStrategy,
            SharingStrategy == O2.SharingStrategy {
        let source = _RXSwift_Observable.zip(
            source1.asSharedSequence().asObservable(), source2.asSharedSequence().asObservable()
        )

        return _RXSwift_SharedSequence<SharingStrategy, (O1.Element, O2.Element)>(source)
    }
}

extension _RXSwift_SharedSequence {
    /**
    Merges the specified _RXSwift_Observable.sequences into one _RXSwift_Observable.sequence by using the selector function whenever any of the _RXSwift_Observable.sequences produces an element.

    - parameter resultSelector: Function to invoke whenever any of the sources produces an element.
    - returns: An _RXSwift_Observable.sequence containing the result of combining elements of the sources using the specified result selector function.
    */
    static func combineLatest<O1: _RXSwift_SharedSequenceConvertibleType, O2: _RXSwift_SharedSequenceConvertibleType>
        (_ source1: O1, _ source2: O2, resultSelector: @escaping (O1.Element, O2.Element) throws -> Element)
        -> _RXSwift_SharedSequence<SharingStrategy, Element> where SharingStrategy == O1.SharingStrategy,
            SharingStrategy == O2.SharingStrategy {
        let source = _RXSwift_Observable.combineLatest(
                source1.asSharedSequence().asObservable(), source2.asSharedSequence().asObservable(),
                resultSelector: resultSelector
            )

        return _RXSwift_SharedSequence<O1.SharingStrategy, Element>(source)
    }
}

extension _RXSwift_SharedSequenceConvertibleType where Element == Any {
    /**
    Merges the specified _RXSwift_Observable.sequences into one _RXSwift_Observable.sequence of element tuples whenever any of the _RXSwift_Observable.sequences produces an element.

    - returns: An _RXSwift_Observable.sequence containing the result of combining elements of the sources.
    */
    static func combineLatest<O1: _RXSwift_SharedSequenceConvertibleType, O2: _RXSwift_SharedSequenceConvertibleType>
        (_ source1: O1, _ source2: O2)
        -> _RXSwift_SharedSequence<SharingStrategy, (O1.Element, O2.Element)> where SharingStrategy == O1.SharingStrategy,
            SharingStrategy == O2.SharingStrategy {
        let source = _RXSwift_Observable.combineLatest(
                source1.asSharedSequence().asObservable(), source2.asSharedSequence().asObservable()
            )

        return _RXSwift_SharedSequence<O1.SharingStrategy, (O1.Element, O2.Element)>(source)
    }
}



// 3

extension _RXSwift_SharedSequence {
    /**
    Merges the specified _RXSwift_Observable.sequences into one _RXSwift_Observable.sequence by using the selector function whenever all of the _RXSwift_Observable.sequences have produced an element at a corresponding index.

    - parameter resultSelector: Function to invoke for each series of elements at corresponding indexes in the sources.
    - returns: An _RXSwift_Observable.sequence containing the result of combining elements of the sources using the specified result selector function.
    */
    static func zip<O1: _RXSwift_SharedSequenceConvertibleType, O2: _RXSwift_SharedSequenceConvertibleType, O3: _RXSwift_SharedSequenceConvertibleType>
        (_ source1: O1, _ source2: O2, _ source3: O3, resultSelector: @escaping (O1.Element, O2.Element, O3.Element) throws -> Element)
        -> _RXSwift_SharedSequence<O1.SharingStrategy, Element> where SharingStrategy == O1.SharingStrategy,
            SharingStrategy == O2.SharingStrategy,
            SharingStrategy == O3.SharingStrategy {
        let source = _RXSwift_Observable.zip(
            source1.asSharedSequence().asObservable(), source2.asSharedSequence().asObservable(), source3.asSharedSequence().asObservable(),
            resultSelector: resultSelector
        )

        return _RXSwift_SharedSequence<SharingStrategy, Element>(source)
    }
}

extension _RXSwift_SharedSequenceConvertibleType where Element == Any {
    /**
    Merges the specified _RXSwift_Observable.sequences into one _RXSwift_Observable.sequence of element tuples whenever all of the _RXSwift_Observable.sequences have produced an element at a corresponding index.

    - returns: An _RXSwift_Observable.sequence containing the result of combining elements of the sources.
    */
    static func zip<O1: _RXSwift_SharedSequenceConvertibleType, O2: _RXSwift_SharedSequenceConvertibleType, O3: _RXSwift_SharedSequenceConvertibleType>
        (_ source1: O1, _ source2: O2, _ source3: O3)
        -> _RXSwift_SharedSequence<O1.SharingStrategy, (O1.Element, O2.Element, O3.Element)> where SharingStrategy == O1.SharingStrategy,
            SharingStrategy == O2.SharingStrategy,
            SharingStrategy == O3.SharingStrategy {
        let source = _RXSwift_Observable.zip(
            source1.asSharedSequence().asObservable(), source2.asSharedSequence().asObservable(), source3.asSharedSequence().asObservable()
        )

        return _RXSwift_SharedSequence<SharingStrategy, (O1.Element, O2.Element, O3.Element)>(source)
    }
}

extension _RXSwift_SharedSequence {
    /**
    Merges the specified _RXSwift_Observable.sequences into one _RXSwift_Observable.sequence by using the selector function whenever any of the _RXSwift_Observable.sequences produces an element.

    - parameter resultSelector: Function to invoke whenever any of the sources produces an element.
    - returns: An _RXSwift_Observable.sequence containing the result of combining elements of the sources using the specified result selector function.
    */
    static func combineLatest<O1: _RXSwift_SharedSequenceConvertibleType, O2: _RXSwift_SharedSequenceConvertibleType, O3: _RXSwift_SharedSequenceConvertibleType>
        (_ source1: O1, _ source2: O2, _ source3: O3, resultSelector: @escaping (O1.Element, O2.Element, O3.Element) throws -> Element)
        -> _RXSwift_SharedSequence<SharingStrategy, Element> where SharingStrategy == O1.SharingStrategy,
            SharingStrategy == O2.SharingStrategy,
            SharingStrategy == O3.SharingStrategy {
        let source = _RXSwift_Observable.combineLatest(
                source1.asSharedSequence().asObservable(), source2.asSharedSequence().asObservable(), source3.asSharedSequence().asObservable(),
                resultSelector: resultSelector
            )

        return _RXSwift_SharedSequence<O1.SharingStrategy, Element>(source)
    }
}

extension _RXSwift_SharedSequenceConvertibleType where Element == Any {
    /**
    Merges the specified _RXSwift_Observable.sequences into one _RXSwift_Observable.sequence of element tuples whenever any of the _RXSwift_Observable.sequences produces an element.

    - returns: An _RXSwift_Observable.sequence containing the result of combining elements of the sources.
    */
    static func combineLatest<O1: _RXSwift_SharedSequenceConvertibleType, O2: _RXSwift_SharedSequenceConvertibleType, O3: _RXSwift_SharedSequenceConvertibleType>
        (_ source1: O1, _ source2: O2, _ source3: O3)
        -> _RXSwift_SharedSequence<SharingStrategy, (O1.Element, O2.Element, O3.Element)> where SharingStrategy == O1.SharingStrategy,
            SharingStrategy == O2.SharingStrategy,
            SharingStrategy == O3.SharingStrategy {
        let source = _RXSwift_Observable.combineLatest(
                source1.asSharedSequence().asObservable(), source2.asSharedSequence().asObservable(), source3.asSharedSequence().asObservable()
            )

        return _RXSwift_SharedSequence<O1.SharingStrategy, (O1.Element, O2.Element, O3.Element)>(source)
    }
}



// 4

extension _RXSwift_SharedSequence {
    /**
    Merges the specified _RXSwift_Observable.sequences into one _RXSwift_Observable.sequence by using the selector function whenever all of the _RXSwift_Observable.sequences have produced an element at a corresponding index.

    - parameter resultSelector: Function to invoke for each series of elements at corresponding indexes in the sources.
    - returns: An _RXSwift_Observable.sequence containing the result of combining elements of the sources using the specified result selector function.
    */
    static func zip<O1: _RXSwift_SharedSequenceConvertibleType, O2: _RXSwift_SharedSequenceConvertibleType, O3: _RXSwift_SharedSequenceConvertibleType, O4: _RXSwift_SharedSequenceConvertibleType>
        (_ source1: O1, _ source2: O2, _ source3: O3, _ source4: O4, resultSelector: @escaping (O1.Element, O2.Element, O3.Element, O4.Element) throws -> Element)
        -> _RXSwift_SharedSequence<O1.SharingStrategy, Element> where SharingStrategy == O1.SharingStrategy,
            SharingStrategy == O2.SharingStrategy,
            SharingStrategy == O3.SharingStrategy,
            SharingStrategy == O4.SharingStrategy {
        let source = _RXSwift_Observable.zip(
            source1.asSharedSequence().asObservable(), source2.asSharedSequence().asObservable(), source3.asSharedSequence().asObservable(), source4.asSharedSequence().asObservable(),
            resultSelector: resultSelector
        )

        return _RXSwift_SharedSequence<SharingStrategy, Element>(source)
    }
}

extension _RXSwift_SharedSequenceConvertibleType where Element == Any {
    /**
    Merges the specified _RXSwift_Observable.sequences into one _RXSwift_Observable.sequence of element tuples whenever all of the _RXSwift_Observable.sequences have produced an element at a corresponding index.

    - returns: An _RXSwift_Observable.sequence containing the result of combining elements of the sources.
    */
    static func zip<O1: _RXSwift_SharedSequenceConvertibleType, O2: _RXSwift_SharedSequenceConvertibleType, O3: _RXSwift_SharedSequenceConvertibleType, O4: _RXSwift_SharedSequenceConvertibleType>
        (_ source1: O1, _ source2: O2, _ source3: O3, _ source4: O4)
        -> _RXSwift_SharedSequence<O1.SharingStrategy, (O1.Element, O2.Element, O3.Element, O4.Element)> where SharingStrategy == O1.SharingStrategy,
            SharingStrategy == O2.SharingStrategy,
            SharingStrategy == O3.SharingStrategy,
            SharingStrategy == O4.SharingStrategy {
        let source = _RXSwift_Observable.zip(
            source1.asSharedSequence().asObservable(), source2.asSharedSequence().asObservable(), source3.asSharedSequence().asObservable(), source4.asSharedSequence().asObservable()
        )

        return _RXSwift_SharedSequence<SharingStrategy, (O1.Element, O2.Element, O3.Element, O4.Element)>(source)
    }
}

extension _RXSwift_SharedSequence {
    /**
    Merges the specified _RXSwift_Observable.sequences into one _RXSwift_Observable.sequence by using the selector function whenever any of the _RXSwift_Observable.sequences produces an element.

    - parameter resultSelector: Function to invoke whenever any of the sources produces an element.
    - returns: An _RXSwift_Observable.sequence containing the result of combining elements of the sources using the specified result selector function.
    */
    static func combineLatest<O1: _RXSwift_SharedSequenceConvertibleType, O2: _RXSwift_SharedSequenceConvertibleType, O3: _RXSwift_SharedSequenceConvertibleType, O4: _RXSwift_SharedSequenceConvertibleType>
        (_ source1: O1, _ source2: O2, _ source3: O3, _ source4: O4, resultSelector: @escaping (O1.Element, O2.Element, O3.Element, O4.Element) throws -> Element)
        -> _RXSwift_SharedSequence<SharingStrategy, Element> where SharingStrategy == O1.SharingStrategy,
            SharingStrategy == O2.SharingStrategy,
            SharingStrategy == O3.SharingStrategy,
            SharingStrategy == O4.SharingStrategy {
        let source = _RXSwift_Observable.combineLatest(
                source1.asSharedSequence().asObservable(), source2.asSharedSequence().asObservable(), source3.asSharedSequence().asObservable(), source4.asSharedSequence().asObservable(),
                resultSelector: resultSelector
            )

        return _RXSwift_SharedSequence<O1.SharingStrategy, Element>(source)
    }
}

extension _RXSwift_SharedSequenceConvertibleType where Element == Any {
    /**
    Merges the specified _RXSwift_Observable.sequences into one _RXSwift_Observable.sequence of element tuples whenever any of the _RXSwift_Observable.sequences produces an element.

    - returns: An _RXSwift_Observable.sequence containing the result of combining elements of the sources.
    */
    static func combineLatest<O1: _RXSwift_SharedSequenceConvertibleType, O2: _RXSwift_SharedSequenceConvertibleType, O3: _RXSwift_SharedSequenceConvertibleType, O4: _RXSwift_SharedSequenceConvertibleType>
        (_ source1: O1, _ source2: O2, _ source3: O3, _ source4: O4)
        -> _RXSwift_SharedSequence<SharingStrategy, (O1.Element, O2.Element, O3.Element, O4.Element)> where SharingStrategy == O1.SharingStrategy,
            SharingStrategy == O2.SharingStrategy,
            SharingStrategy == O3.SharingStrategy,
            SharingStrategy == O4.SharingStrategy {
        let source = _RXSwift_Observable.combineLatest(
                source1.asSharedSequence().asObservable(), source2.asSharedSequence().asObservable(), source3.asSharedSequence().asObservable(), source4.asSharedSequence().asObservable()
            )

        return _RXSwift_SharedSequence<O1.SharingStrategy, (O1.Element, O2.Element, O3.Element, O4.Element)>(source)
    }
}



// 5

extension _RXSwift_SharedSequence {
    /**
    Merges the specified _RXSwift_Observable.sequences into one _RXSwift_Observable.sequence by using the selector function whenever all of the _RXSwift_Observable.sequences have produced an element at a corresponding index.

    - parameter resultSelector: Function to invoke for each series of elements at corresponding indexes in the sources.
    - returns: An _RXSwift_Observable.sequence containing the result of combining elements of the sources using the specified result selector function.
    */
    static func zip<O1: _RXSwift_SharedSequenceConvertibleType, O2: _RXSwift_SharedSequenceConvertibleType, O3: _RXSwift_SharedSequenceConvertibleType, O4: _RXSwift_SharedSequenceConvertibleType, O5: _RXSwift_SharedSequenceConvertibleType>
        (_ source1: O1, _ source2: O2, _ source3: O3, _ source4: O4, _ source5: O5, resultSelector: @escaping (O1.Element, O2.Element, O3.Element, O4.Element, O5.Element) throws -> Element)
        -> _RXSwift_SharedSequence<O1.SharingStrategy, Element> where SharingStrategy == O1.SharingStrategy,
            SharingStrategy == O2.SharingStrategy,
            SharingStrategy == O3.SharingStrategy,
            SharingStrategy == O4.SharingStrategy,
            SharingStrategy == O5.SharingStrategy {
        let source = _RXSwift_Observable.zip(
            source1.asSharedSequence().asObservable(), source2.asSharedSequence().asObservable(), source3.asSharedSequence().asObservable(), source4.asSharedSequence().asObservable(), source5.asSharedSequence().asObservable(),
            resultSelector: resultSelector
        )

        return _RXSwift_SharedSequence<SharingStrategy, Element>(source)
    }
}

extension _RXSwift_SharedSequenceConvertibleType where Element == Any {
    /**
    Merges the specified _RXSwift_Observable.sequences into one _RXSwift_Observable.sequence of element tuples whenever all of the _RXSwift_Observable.sequences have produced an element at a corresponding index.

    - returns: An _RXSwift_Observable.sequence containing the result of combining elements of the sources.
    */
    static func zip<O1: _RXSwift_SharedSequenceConvertibleType, O2: _RXSwift_SharedSequenceConvertibleType, O3: _RXSwift_SharedSequenceConvertibleType, O4: _RXSwift_SharedSequenceConvertibleType, O5: _RXSwift_SharedSequenceConvertibleType>
        (_ source1: O1, _ source2: O2, _ source3: O3, _ source4: O4, _ source5: O5)
        -> _RXSwift_SharedSequence<O1.SharingStrategy, (O1.Element, O2.Element, O3.Element, O4.Element, O5.Element)> where SharingStrategy == O1.SharingStrategy,
            SharingStrategy == O2.SharingStrategy,
            SharingStrategy == O3.SharingStrategy,
            SharingStrategy == O4.SharingStrategy,
            SharingStrategy == O5.SharingStrategy {
        let source = _RXSwift_Observable.zip(
            source1.asSharedSequence().asObservable(), source2.asSharedSequence().asObservable(), source3.asSharedSequence().asObservable(), source4.asSharedSequence().asObservable(), source5.asSharedSequence().asObservable()
        )

        return _RXSwift_SharedSequence<SharingStrategy, (O1.Element, O2.Element, O3.Element, O4.Element, O5.Element)>(source)
    }
}

extension _RXSwift_SharedSequence {
    /**
    Merges the specified _RXSwift_Observable.sequences into one _RXSwift_Observable.sequence by using the selector function whenever any of the _RXSwift_Observable.sequences produces an element.

    - parameter resultSelector: Function to invoke whenever any of the sources produces an element.
    - returns: An _RXSwift_Observable.sequence containing the result of combining elements of the sources using the specified result selector function.
    */
    static func combineLatest<O1: _RXSwift_SharedSequenceConvertibleType, O2: _RXSwift_SharedSequenceConvertibleType, O3: _RXSwift_SharedSequenceConvertibleType, O4: _RXSwift_SharedSequenceConvertibleType, O5: _RXSwift_SharedSequenceConvertibleType>
        (_ source1: O1, _ source2: O2, _ source3: O3, _ source4: O4, _ source5: O5, resultSelector: @escaping (O1.Element, O2.Element, O3.Element, O4.Element, O5.Element) throws -> Element)
        -> _RXSwift_SharedSequence<SharingStrategy, Element> where SharingStrategy == O1.SharingStrategy,
            SharingStrategy == O2.SharingStrategy,
            SharingStrategy == O3.SharingStrategy,
            SharingStrategy == O4.SharingStrategy,
            SharingStrategy == O5.SharingStrategy {
        let source = _RXSwift_Observable.combineLatest(
                source1.asSharedSequence().asObservable(), source2.asSharedSequence().asObservable(), source3.asSharedSequence().asObservable(), source4.asSharedSequence().asObservable(), source5.asSharedSequence().asObservable(),
                resultSelector: resultSelector
            )

        return _RXSwift_SharedSequence<O1.SharingStrategy, Element>(source)
    }
}

extension _RXSwift_SharedSequenceConvertibleType where Element == Any {
    /**
    Merges the specified _RXSwift_Observable.sequences into one _RXSwift_Observable.sequence of element tuples whenever any of the _RXSwift_Observable.sequences produces an element.

    - returns: An _RXSwift_Observable.sequence containing the result of combining elements of the sources.
    */
    static func combineLatest<O1: _RXSwift_SharedSequenceConvertibleType, O2: _RXSwift_SharedSequenceConvertibleType, O3: _RXSwift_SharedSequenceConvertibleType, O4: _RXSwift_SharedSequenceConvertibleType, O5: _RXSwift_SharedSequenceConvertibleType>
        (_ source1: O1, _ source2: O2, _ source3: O3, _ source4: O4, _ source5: O5)
        -> _RXSwift_SharedSequence<SharingStrategy, (O1.Element, O2.Element, O3.Element, O4.Element, O5.Element)> where SharingStrategy == O1.SharingStrategy,
            SharingStrategy == O2.SharingStrategy,
            SharingStrategy == O3.SharingStrategy,
            SharingStrategy == O4.SharingStrategy,
            SharingStrategy == O5.SharingStrategy {
        let source = _RXSwift_Observable.combineLatest(
                source1.asSharedSequence().asObservable(), source2.asSharedSequence().asObservable(), source3.asSharedSequence().asObservable(), source4.asSharedSequence().asObservable(), source5.asSharedSequence().asObservable()
            )

        return _RXSwift_SharedSequence<O1.SharingStrategy, (O1.Element, O2.Element, O3.Element, O4.Element, O5.Element)>(source)
    }
}



// 6

extension _RXSwift_SharedSequence {
    /**
    Merges the specified _RXSwift_Observable.sequences into one _RXSwift_Observable.sequence by using the selector function whenever all of the _RXSwift_Observable.sequences have produced an element at a corresponding index.

    - parameter resultSelector: Function to invoke for each series of elements at corresponding indexes in the sources.
    - returns: An _RXSwift_Observable.sequence containing the result of combining elements of the sources using the specified result selector function.
    */
    static func zip<O1: _RXSwift_SharedSequenceConvertibleType, O2: _RXSwift_SharedSequenceConvertibleType, O3: _RXSwift_SharedSequenceConvertibleType, O4: _RXSwift_SharedSequenceConvertibleType, O5: _RXSwift_SharedSequenceConvertibleType, O6: _RXSwift_SharedSequenceConvertibleType>
        (_ source1: O1, _ source2: O2, _ source3: O3, _ source4: O4, _ source5: O5, _ source6: O6, resultSelector: @escaping (O1.Element, O2.Element, O3.Element, O4.Element, O5.Element, O6.Element) throws -> Element)
        -> _RXSwift_SharedSequence<O1.SharingStrategy, Element> where SharingStrategy == O1.SharingStrategy,
            SharingStrategy == O2.SharingStrategy,
            SharingStrategy == O3.SharingStrategy,
            SharingStrategy == O4.SharingStrategy,
            SharingStrategy == O5.SharingStrategy,
            SharingStrategy == O6.SharingStrategy {
        let source = _RXSwift_Observable.zip(
            source1.asSharedSequence().asObservable(), source2.asSharedSequence().asObservable(), source3.asSharedSequence().asObservable(), source4.asSharedSequence().asObservable(), source5.asSharedSequence().asObservable(), source6.asSharedSequence().asObservable(),
            resultSelector: resultSelector
        )

        return _RXSwift_SharedSequence<SharingStrategy, Element>(source)
    }
}

extension _RXSwift_SharedSequenceConvertibleType where Element == Any {
    /**
    Merges the specified _RXSwift_Observable.sequences into one _RXSwift_Observable.sequence of element tuples whenever all of the _RXSwift_Observable.sequences have produced an element at a corresponding index.

    - returns: An _RXSwift_Observable.sequence containing the result of combining elements of the sources.
    */
    static func zip<O1: _RXSwift_SharedSequenceConvertibleType, O2: _RXSwift_SharedSequenceConvertibleType, O3: _RXSwift_SharedSequenceConvertibleType, O4: _RXSwift_SharedSequenceConvertibleType, O5: _RXSwift_SharedSequenceConvertibleType, O6: _RXSwift_SharedSequenceConvertibleType>
        (_ source1: O1, _ source2: O2, _ source3: O3, _ source4: O4, _ source5: O5, _ source6: O6)
        -> _RXSwift_SharedSequence<O1.SharingStrategy, (O1.Element, O2.Element, O3.Element, O4.Element, O5.Element, O6.Element)> where SharingStrategy == O1.SharingStrategy,
            SharingStrategy == O2.SharingStrategy,
            SharingStrategy == O3.SharingStrategy,
            SharingStrategy == O4.SharingStrategy,
            SharingStrategy == O5.SharingStrategy,
            SharingStrategy == O6.SharingStrategy {
        let source = _RXSwift_Observable.zip(
            source1.asSharedSequence().asObservable(), source2.asSharedSequence().asObservable(), source3.asSharedSequence().asObservable(), source4.asSharedSequence().asObservable(), source5.asSharedSequence().asObservable(), source6.asSharedSequence().asObservable()
        )

        return _RXSwift_SharedSequence<SharingStrategy, (O1.Element, O2.Element, O3.Element, O4.Element, O5.Element, O6.Element)>(source)
    }
}

extension _RXSwift_SharedSequence {
    /**
    Merges the specified _RXSwift_Observable.sequences into one _RXSwift_Observable.sequence by using the selector function whenever any of the _RXSwift_Observable.sequences produces an element.

    - parameter resultSelector: Function to invoke whenever any of the sources produces an element.
    - returns: An _RXSwift_Observable.sequence containing the result of combining elements of the sources using the specified result selector function.
    */
    static func combineLatest<O1: _RXSwift_SharedSequenceConvertibleType, O2: _RXSwift_SharedSequenceConvertibleType, O3: _RXSwift_SharedSequenceConvertibleType, O4: _RXSwift_SharedSequenceConvertibleType, O5: _RXSwift_SharedSequenceConvertibleType, O6: _RXSwift_SharedSequenceConvertibleType>
        (_ source1: O1, _ source2: O2, _ source3: O3, _ source4: O4, _ source5: O5, _ source6: O6, resultSelector: @escaping (O1.Element, O2.Element, O3.Element, O4.Element, O5.Element, O6.Element) throws -> Element)
        -> _RXSwift_SharedSequence<SharingStrategy, Element> where SharingStrategy == O1.SharingStrategy,
            SharingStrategy == O2.SharingStrategy,
            SharingStrategy == O3.SharingStrategy,
            SharingStrategy == O4.SharingStrategy,
            SharingStrategy == O5.SharingStrategy,
            SharingStrategy == O6.SharingStrategy {
        let source = _RXSwift_Observable.combineLatest(
                source1.asSharedSequence().asObservable(), source2.asSharedSequence().asObservable(), source3.asSharedSequence().asObservable(), source4.asSharedSequence().asObservable(), source5.asSharedSequence().asObservable(), source6.asSharedSequence().asObservable(),
                resultSelector: resultSelector
            )

        return _RXSwift_SharedSequence<O1.SharingStrategy, Element>(source)
    }
}

extension _RXSwift_SharedSequenceConvertibleType where Element == Any {
    /**
    Merges the specified _RXSwift_Observable.sequences into one _RXSwift_Observable.sequence of element tuples whenever any of the _RXSwift_Observable.sequences produces an element.

    - returns: An _RXSwift_Observable.sequence containing the result of combining elements of the sources.
    */
    static func combineLatest<O1: _RXSwift_SharedSequenceConvertibleType, O2: _RXSwift_SharedSequenceConvertibleType, O3: _RXSwift_SharedSequenceConvertibleType, O4: _RXSwift_SharedSequenceConvertibleType, O5: _RXSwift_SharedSequenceConvertibleType, O6: _RXSwift_SharedSequenceConvertibleType>
        (_ source1: O1, _ source2: O2, _ source3: O3, _ source4: O4, _ source5: O5, _ source6: O6)
        -> _RXSwift_SharedSequence<SharingStrategy, (O1.Element, O2.Element, O3.Element, O4.Element, O5.Element, O6.Element)> where SharingStrategy == O1.SharingStrategy,
            SharingStrategy == O2.SharingStrategy,
            SharingStrategy == O3.SharingStrategy,
            SharingStrategy == O4.SharingStrategy,
            SharingStrategy == O5.SharingStrategy,
            SharingStrategy == O6.SharingStrategy {
        let source = _RXSwift_Observable.combineLatest(
                source1.asSharedSequence().asObservable(), source2.asSharedSequence().asObservable(), source3.asSharedSequence().asObservable(), source4.asSharedSequence().asObservable(), source5.asSharedSequence().asObservable(), source6.asSharedSequence().asObservable()
            )

        return _RXSwift_SharedSequence<O1.SharingStrategy, (O1.Element, O2.Element, O3.Element, O4.Element, O5.Element, O6.Element)>(source)
    }
}



// 7

extension _RXSwift_SharedSequence {
    /**
    Merges the specified _RXSwift_Observable.sequences into one _RXSwift_Observable.sequence by using the selector function whenever all of the _RXSwift_Observable.sequences have produced an element at a corresponding index.

    - parameter resultSelector: Function to invoke for each series of elements at corresponding indexes in the sources.
    - returns: An _RXSwift_Observable.sequence containing the result of combining elements of the sources using the specified result selector function.
    */
    static func zip<O1: _RXSwift_SharedSequenceConvertibleType, O2: _RXSwift_SharedSequenceConvertibleType, O3: _RXSwift_SharedSequenceConvertibleType, O4: _RXSwift_SharedSequenceConvertibleType, O5: _RXSwift_SharedSequenceConvertibleType, O6: _RXSwift_SharedSequenceConvertibleType, O7: _RXSwift_SharedSequenceConvertibleType>
        (_ source1: O1, _ source2: O2, _ source3: O3, _ source4: O4, _ source5: O5, _ source6: O6, _ source7: O7, resultSelector: @escaping (O1.Element, O2.Element, O3.Element, O4.Element, O5.Element, O6.Element, O7.Element) throws -> Element)
        -> _RXSwift_SharedSequence<O1.SharingStrategy, Element> where SharingStrategy == O1.SharingStrategy,
            SharingStrategy == O2.SharingStrategy,
            SharingStrategy == O3.SharingStrategy,
            SharingStrategy == O4.SharingStrategy,
            SharingStrategy == O5.SharingStrategy,
            SharingStrategy == O6.SharingStrategy,
            SharingStrategy == O7.SharingStrategy {
        let source = _RXSwift_Observable.zip(
            source1.asSharedSequence().asObservable(), source2.asSharedSequence().asObservable(), source3.asSharedSequence().asObservable(), source4.asSharedSequence().asObservable(), source5.asSharedSequence().asObservable(), source6.asSharedSequence().asObservable(), source7.asSharedSequence().asObservable(),
            resultSelector: resultSelector
        )

        return _RXSwift_SharedSequence<SharingStrategy, Element>(source)
    }
}

extension _RXSwift_SharedSequenceConvertibleType where Element == Any {
    /**
    Merges the specified _RXSwift_Observable.sequences into one _RXSwift_Observable.sequence of element tuples whenever all of the _RXSwift_Observable.sequences have produced an element at a corresponding index.

    - returns: An _RXSwift_Observable.sequence containing the result of combining elements of the sources.
    */
    static func zip<O1: _RXSwift_SharedSequenceConvertibleType, O2: _RXSwift_SharedSequenceConvertibleType, O3: _RXSwift_SharedSequenceConvertibleType, O4: _RXSwift_SharedSequenceConvertibleType, O5: _RXSwift_SharedSequenceConvertibleType, O6: _RXSwift_SharedSequenceConvertibleType, O7: _RXSwift_SharedSequenceConvertibleType>
        (_ source1: O1, _ source2: O2, _ source3: O3, _ source4: O4, _ source5: O5, _ source6: O6, _ source7: O7)
        -> _RXSwift_SharedSequence<O1.SharingStrategy, (O1.Element, O2.Element, O3.Element, O4.Element, O5.Element, O6.Element, O7.Element)> where SharingStrategy == O1.SharingStrategy,
            SharingStrategy == O2.SharingStrategy,
            SharingStrategy == O3.SharingStrategy,
            SharingStrategy == O4.SharingStrategy,
            SharingStrategy == O5.SharingStrategy,
            SharingStrategy == O6.SharingStrategy,
            SharingStrategy == O7.SharingStrategy {
        let source = _RXSwift_Observable.zip(
            source1.asSharedSequence().asObservable(), source2.asSharedSequence().asObservable(), source3.asSharedSequence().asObservable(), source4.asSharedSequence().asObservable(), source5.asSharedSequence().asObservable(), source6.asSharedSequence().asObservable(), source7.asSharedSequence().asObservable()
        )

        return _RXSwift_SharedSequence<SharingStrategy, (O1.Element, O2.Element, O3.Element, O4.Element, O5.Element, O6.Element, O7.Element)>(source)
    }
}

extension _RXSwift_SharedSequence {
    /**
    Merges the specified _RXSwift_Observable.sequences into one _RXSwift_Observable.sequence by using the selector function whenever any of the _RXSwift_Observable.sequences produces an element.

    - parameter resultSelector: Function to invoke whenever any of the sources produces an element.
    - returns: An _RXSwift_Observable.sequence containing the result of combining elements of the sources using the specified result selector function.
    */
    static func combineLatest<O1: _RXSwift_SharedSequenceConvertibleType, O2: _RXSwift_SharedSequenceConvertibleType, O3: _RXSwift_SharedSequenceConvertibleType, O4: _RXSwift_SharedSequenceConvertibleType, O5: _RXSwift_SharedSequenceConvertibleType, O6: _RXSwift_SharedSequenceConvertibleType, O7: _RXSwift_SharedSequenceConvertibleType>
        (_ source1: O1, _ source2: O2, _ source3: O3, _ source4: O4, _ source5: O5, _ source6: O6, _ source7: O7, resultSelector: @escaping (O1.Element, O2.Element, O3.Element, O4.Element, O5.Element, O6.Element, O7.Element) throws -> Element)
        -> _RXSwift_SharedSequence<SharingStrategy, Element> where SharingStrategy == O1.SharingStrategy,
            SharingStrategy == O2.SharingStrategy,
            SharingStrategy == O3.SharingStrategy,
            SharingStrategy == O4.SharingStrategy,
            SharingStrategy == O5.SharingStrategy,
            SharingStrategy == O6.SharingStrategy,
            SharingStrategy == O7.SharingStrategy {
        let source = _RXSwift_Observable.combineLatest(
                source1.asSharedSequence().asObservable(), source2.asSharedSequence().asObservable(), source3.asSharedSequence().asObservable(), source4.asSharedSequence().asObservable(), source5.asSharedSequence().asObservable(), source6.asSharedSequence().asObservable(), source7.asSharedSequence().asObservable(),
                resultSelector: resultSelector
            )

        return _RXSwift_SharedSequence<O1.SharingStrategy, Element>(source)
    }
}

extension _RXSwift_SharedSequenceConvertibleType where Element == Any {
    /**
    Merges the specified _RXSwift_Observable.sequences into one _RXSwift_Observable.sequence of element tuples whenever any of the _RXSwift_Observable.sequences produces an element.

    - returns: An _RXSwift_Observable.sequence containing the result of combining elements of the sources.
    */
    static func combineLatest<O1: _RXSwift_SharedSequenceConvertibleType, O2: _RXSwift_SharedSequenceConvertibleType, O3: _RXSwift_SharedSequenceConvertibleType, O4: _RXSwift_SharedSequenceConvertibleType, O5: _RXSwift_SharedSequenceConvertibleType, O6: _RXSwift_SharedSequenceConvertibleType, O7: _RXSwift_SharedSequenceConvertibleType>
        (_ source1: O1, _ source2: O2, _ source3: O3, _ source4: O4, _ source5: O5, _ source6: O6, _ source7: O7)
        -> _RXSwift_SharedSequence<SharingStrategy, (O1.Element, O2.Element, O3.Element, O4.Element, O5.Element, O6.Element, O7.Element)> where SharingStrategy == O1.SharingStrategy,
            SharingStrategy == O2.SharingStrategy,
            SharingStrategy == O3.SharingStrategy,
            SharingStrategy == O4.SharingStrategy,
            SharingStrategy == O5.SharingStrategy,
            SharingStrategy == O6.SharingStrategy,
            SharingStrategy == O7.SharingStrategy {
        let source = _RXSwift_Observable.combineLatest(
                source1.asSharedSequence().asObservable(), source2.asSharedSequence().asObservable(), source3.asSharedSequence().asObservable(), source4.asSharedSequence().asObservable(), source5.asSharedSequence().asObservable(), source6.asSharedSequence().asObservable(), source7.asSharedSequence().asObservable()
            )

        return _RXSwift_SharedSequence<O1.SharingStrategy, (O1.Element, O2.Element, O3.Element, O4.Element, O5.Element, O6.Element, O7.Element)>(source)
    }
}



// 8

extension _RXSwift_SharedSequence {
    /**
    Merges the specified _RXSwift_Observable.sequences into one _RXSwift_Observable.sequence by using the selector function whenever all of the _RXSwift_Observable.sequences have produced an element at a corresponding index.

    - parameter resultSelector: Function to invoke for each series of elements at corresponding indexes in the sources.
    - returns: An _RXSwift_Observable.sequence containing the result of combining elements of the sources using the specified result selector function.
    */
    static func zip<O1: _RXSwift_SharedSequenceConvertibleType, O2: _RXSwift_SharedSequenceConvertibleType, O3: _RXSwift_SharedSequenceConvertibleType, O4: _RXSwift_SharedSequenceConvertibleType, O5: _RXSwift_SharedSequenceConvertibleType, O6: _RXSwift_SharedSequenceConvertibleType, O7: _RXSwift_SharedSequenceConvertibleType, O8: _RXSwift_SharedSequenceConvertibleType>
        (_ source1: O1, _ source2: O2, _ source3: O3, _ source4: O4, _ source5: O5, _ source6: O6, _ source7: O7, _ source8: O8, resultSelector: @escaping (O1.Element, O2.Element, O3.Element, O4.Element, O5.Element, O6.Element, O7.Element, O8.Element) throws -> Element)
        -> _RXSwift_SharedSequence<O1.SharingStrategy, Element> where SharingStrategy == O1.SharingStrategy,
            SharingStrategy == O2.SharingStrategy,
            SharingStrategy == O3.SharingStrategy,
            SharingStrategy == O4.SharingStrategy,
            SharingStrategy == O5.SharingStrategy,
            SharingStrategy == O6.SharingStrategy,
            SharingStrategy == O7.SharingStrategy,
            SharingStrategy == O8.SharingStrategy {
        let source = _RXSwift_Observable.zip(
            source1.asSharedSequence().asObservable(), source2.asSharedSequence().asObservable(), source3.asSharedSequence().asObservable(), source4.asSharedSequence().asObservable(), source5.asSharedSequence().asObservable(), source6.asSharedSequence().asObservable(), source7.asSharedSequence().asObservable(), source8.asSharedSequence().asObservable(),
            resultSelector: resultSelector
        )

        return _RXSwift_SharedSequence<SharingStrategy, Element>(source)
    }
}

extension _RXSwift_SharedSequenceConvertibleType where Element == Any {
    /**
    Merges the specified _RXSwift_Observable.sequences into one _RXSwift_Observable.sequence of element tuples whenever all of the _RXSwift_Observable.sequences have produced an element at a corresponding index.

    - returns: An _RXSwift_Observable.sequence containing the result of combining elements of the sources.
    */
    static func zip<O1: _RXSwift_SharedSequenceConvertibleType, O2: _RXSwift_SharedSequenceConvertibleType, O3: _RXSwift_SharedSequenceConvertibleType, O4: _RXSwift_SharedSequenceConvertibleType, O5: _RXSwift_SharedSequenceConvertibleType, O6: _RXSwift_SharedSequenceConvertibleType, O7: _RXSwift_SharedSequenceConvertibleType, O8: _RXSwift_SharedSequenceConvertibleType>
        (_ source1: O1, _ source2: O2, _ source3: O3, _ source4: O4, _ source5: O5, _ source6: O6, _ source7: O7, _ source8: O8)
        -> _RXSwift_SharedSequence<O1.SharingStrategy, (O1.Element, O2.Element, O3.Element, O4.Element, O5.Element, O6.Element, O7.Element, O8.Element)> where SharingStrategy == O1.SharingStrategy,
            SharingStrategy == O2.SharingStrategy,
            SharingStrategy == O3.SharingStrategy,
            SharingStrategy == O4.SharingStrategy,
            SharingStrategy == O5.SharingStrategy,
            SharingStrategy == O6.SharingStrategy,
            SharingStrategy == O7.SharingStrategy,
            SharingStrategy == O8.SharingStrategy {
        let source = _RXSwift_Observable.zip(
            source1.asSharedSequence().asObservable(), source2.asSharedSequence().asObservable(), source3.asSharedSequence().asObservable(), source4.asSharedSequence().asObservable(), source5.asSharedSequence().asObservable(), source6.asSharedSequence().asObservable(), source7.asSharedSequence().asObservable(), source8.asSharedSequence().asObservable()
        )

        return _RXSwift_SharedSequence<SharingStrategy, (O1.Element, O2.Element, O3.Element, O4.Element, O5.Element, O6.Element, O7.Element, O8.Element)>(source)
    }
}

extension _RXSwift_SharedSequence {
    /**
    Merges the specified _RXSwift_Observable.sequences into one _RXSwift_Observable.sequence by using the selector function whenever any of the _RXSwift_Observable.sequences produces an element.

    - parameter resultSelector: Function to invoke whenever any of the sources produces an element.
    - returns: An _RXSwift_Observable.sequence containing the result of combining elements of the sources using the specified result selector function.
    */
    static func combineLatest<O1: _RXSwift_SharedSequenceConvertibleType, O2: _RXSwift_SharedSequenceConvertibleType, O3: _RXSwift_SharedSequenceConvertibleType, O4: _RXSwift_SharedSequenceConvertibleType, O5: _RXSwift_SharedSequenceConvertibleType, O6: _RXSwift_SharedSequenceConvertibleType, O7: _RXSwift_SharedSequenceConvertibleType, O8: _RXSwift_SharedSequenceConvertibleType>
        (_ source1: O1, _ source2: O2, _ source3: O3, _ source4: O4, _ source5: O5, _ source6: O6, _ source7: O7, _ source8: O8, resultSelector: @escaping (O1.Element, O2.Element, O3.Element, O4.Element, O5.Element, O6.Element, O7.Element, O8.Element) throws -> Element)
        -> _RXSwift_SharedSequence<SharingStrategy, Element> where SharingStrategy == O1.SharingStrategy,
            SharingStrategy == O2.SharingStrategy,
            SharingStrategy == O3.SharingStrategy,
            SharingStrategy == O4.SharingStrategy,
            SharingStrategy == O5.SharingStrategy,
            SharingStrategy == O6.SharingStrategy,
            SharingStrategy == O7.SharingStrategy,
            SharingStrategy == O8.SharingStrategy {
        let source = _RXSwift_Observable.combineLatest(
                source1.asSharedSequence().asObservable(), source2.asSharedSequence().asObservable(), source3.asSharedSequence().asObservable(), source4.asSharedSequence().asObservable(), source5.asSharedSequence().asObservable(), source6.asSharedSequence().asObservable(), source7.asSharedSequence().asObservable(), source8.asSharedSequence().asObservable(),
                resultSelector: resultSelector
            )

        return _RXSwift_SharedSequence<O1.SharingStrategy, Element>(source)
    }
}

extension _RXSwift_SharedSequenceConvertibleType where Element == Any {
    /**
    Merges the specified _RXSwift_Observable.sequences into one _RXSwift_Observable.sequence of element tuples whenever any of the _RXSwift_Observable.sequences produces an element.

    - returns: An _RXSwift_Observable.sequence containing the result of combining elements of the sources.
    */
    static func combineLatest<O1: _RXSwift_SharedSequenceConvertibleType, O2: _RXSwift_SharedSequenceConvertibleType, O3: _RXSwift_SharedSequenceConvertibleType, O4: _RXSwift_SharedSequenceConvertibleType, O5: _RXSwift_SharedSequenceConvertibleType, O6: _RXSwift_SharedSequenceConvertibleType, O7: _RXSwift_SharedSequenceConvertibleType, O8: _RXSwift_SharedSequenceConvertibleType>
        (_ source1: O1, _ source2: O2, _ source3: O3, _ source4: O4, _ source5: O5, _ source6: O6, _ source7: O7, _ source8: O8)
        -> _RXSwift_SharedSequence<SharingStrategy, (O1.Element, O2.Element, O3.Element, O4.Element, O5.Element, O6.Element, O7.Element, O8.Element)> where SharingStrategy == O1.SharingStrategy,
            SharingStrategy == O2.SharingStrategy,
            SharingStrategy == O3.SharingStrategy,
            SharingStrategy == O4.SharingStrategy,
            SharingStrategy == O5.SharingStrategy,
            SharingStrategy == O6.SharingStrategy,
            SharingStrategy == O7.SharingStrategy,
            SharingStrategy == O8.SharingStrategy {
        let source = _RXSwift_Observable.combineLatest(
                source1.asSharedSequence().asObservable(), source2.asSharedSequence().asObservable(), source3.asSharedSequence().asObservable(), source4.asSharedSequence().asObservable(), source5.asSharedSequence().asObservable(), source6.asSharedSequence().asObservable(), source7.asSharedSequence().asObservable(), source8.asSharedSequence().asObservable()
            )

        return _RXSwift_SharedSequence<O1.SharingStrategy, (O1.Element, O2.Element, O3.Element, O4.Element, O5.Element, O6.Element, O7.Element, O8.Element)>(source)
    }
}


